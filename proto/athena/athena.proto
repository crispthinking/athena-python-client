syntax = "proto3";

package athena;

import "google/protobuf/empty.proto";

option csharp_namespace = "Resolver.Athena.Grpc";
option java_outer_classname = "AthenaProto";
option java_package = "com.resolver.athena.grpc";
option objc_class_prefix = "RNX";
option php_namespace = "Resolver\\Athena\\Grpc";
option ruby_package = "Resolver::Athena::Grpc";
option swift_prefix = "RNX";

// The classifier service definition.
// Provides image classification capabilities with session-based streaming
// and client management functionality.
service ClassifierService {
  // Classify images in a deployment-based streaming context
  // Multiple affiliates can join the same deployment to share responses
  // Supports bidirectional streaming for real-time classification
  rpc Classify(stream ClassifyRequest) returns (stream ClassifyResponse);

  // Retrieves a list of all active deployment IDs
  // Returns the active deployment_id values that can be used in Classify requests
  // Useful for monitoring and debugging active connections
  rpc ListDeployments(google.protobuf.Empty) returns (ListDeploymentsResponse);
}

// Response message for ListDeployments RPC
// Contains the list of active deployments and their details.
message ListDeploymentsResponse {
  // List of active deployments with their backlog information.
  repeated Deployment deployments = 1;
}

// A single active deployment part of a `ListDeployments` response
message Deployment {
  // active deployment identifier
  string deployment_id = 1;

  // Backlog of classification responses in this deployment
  int32 backlog = 2;
}

// The request message containing the image data to classify.
// Each request represents a batch of images that should be processed within
// the same deployment context.
message ClassifyRequest {
  // Client's unique identifier for this deployment. Responses returned will be
  // sent to a client with a matching deployment_id.
  string deployment_id = 1;

  // Array of images to be classified in this request batch
  // Allows sending multiple images in a single request for efficiency.
  repeated ClassificationInput inputs = 2;
}

// A single image within a classification request batch.
// Contains all necessary metadata and data for classifying one image.
message ClassificationInput {
  // The affiliate or source system that provided this image
  // Used for tracking, analytics, and routing purposes.
  string affiliate = 1;

  // Unique identifier for correlating this input with its response
  // Must be unique within the deployment to properly match responses
  string correlation_id = 2;

  // Specifies the encoding/compression format of the image data
  // Allows the server to properly decode the image before classification
  RequestEncoding encoding = 3;

  // The raw image data bytes in the format specified by encoding
  // Can be compressed or uncompressed based on the encoding field
  bytes data = 4;
}

// The response message containing the classification results.
// Sent back to clients for each processed batch, containing either
// a global error or individual results for each image in the batch.
message ClassifyResponse {
  // Global error affecting the entire batch/request
  // If present, indicates that the entire request failed and no individual
  // image results will be provided
  ClassificationError global_error = 1;

  // Array of classification results, one for each input image
  // Will be empty if global_error is present
  repeated ClassificationOutput outputs = 2;
}

// Individual classification result for a single image.
// Contains the correlation ID and classification results for one image.
message ClassificationOutput {
  // Matches the correlationId from the corresponding ClassificationInput
  // Allows clients to match responses with their original requests
  string correlation_id = 1;

  // Array of all classifications detected for this image
  // Multiple classifications may be returned with different confidence levels
  repeated Classification classifications = 2;

  // Error information if this specific image classification failed
  // If present, indicates that this particular image could not be processed
  ClassificationError error = 3;
}

// A single classification result for an image.
// Represents one detected category with its confidence score.
message Classification {
  // Human-readable label describing what was classified
  // Examples: "CatA", "CatB", "Indicitive", "Distraction", etc.
  string label = 1;

  // Confidence score between 0.0 and 1.0 indicating certainty
  // Higher values indicate greater confidence in the classification
  float weight = 2;
}

// Error information for failed classification attempts.
// Provides details about why a classification could not be completed.
message ClassificationError {
  // Error code indicating the type of failure
  ErrorCode code = 1;

  // Human-readable error message providing details about the failure
  string message = 2;

  // Additional context or details about the error (optional)
  string details = 3;
}

// Enumeration of possible classification error codes.
enum ErrorCode {
  // Unknown or unspecified error
  ERROR_CODE_UNSPECIFIED = 0;

  // Image is too large to process
  ERROR_CODE_IMAGE_TOO_LARGE = 2;

  // Opaque error from the classifier
  ERROR_CODE_MODEL_ERROR = 3;
}

// Enumeration of supported image data encoding formats.
// Determines how the server should interpret the image data bytes.
enum RequestEncoding {
  // Uncompressed raw image data (e.g., raw RGB pixels, BMP, etc.)
  REQUEST_ENCODING_UNSPECIFIED = 0;

  // Brotli-compressed image data for reduced bandwidth usage
  // Server will decompress using Brotli algorithm before processing
  REQUEST_ENCODING_BROTLI = 1;
}
